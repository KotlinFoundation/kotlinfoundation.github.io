{"data":{"allMdx":{"nodes":[{"id":"219b84c1-5228-5a4f-960b-2986334b305f","excerpt":"We’re excited to announce that Meta has joined the Kotlin Foundation as the first Gold Member. Welcoming such a major technology leader adds a great perspective from a company operating at scale, and opens up new possibilities to help us to achieve our mission to have Kotlin everywhere. Meta has long been an advocate for modern, expressive programming languages, and Kotlin has played an increasingly important role in their development practices. From Android apps to multiplatform exploration, Kotlin has become a strategic part of Meta’s developer toolkit.\n\nMeta has also been an active contributor to the wider ecosystem. Notably, they were one of the founding participants of the enterprise Java-to-Kotlin working group—a collaborative effort with Google, JetBrains, and Uber aimed at supporting companies migrating large Java codebases to Kotlin. This group continues to help shape tooling, best practices, and large-scale migration strategies.\n\nIn addition, Meta supports important infrastructure efforts in the Kotlin ecosystem, including work on the Kotlin and Android build toolchain in Buck with a focus on improving build speeds and scalability, as well as contributions to libraries such as the Kotlin formatter, helping teams maintain consistent and idiomatic Kotlin codebases more easily.\n\nAs a Gold Member of the Kotlin Foundation, Meta will contribute to key initiatives such as the Kotlin Grants program for OSS contributors and educational efforts like the Kotlin Multiplatform student contest.\n\nWe’re really happy to collaborate with Meta and look forward to the expertise and scale they bring to the Foundation’s mission.\n\nTo learn more about the Kotlin Foundation and how to get involved, visit the Membership page.\n\nLet’s keep shaping the future of Kotlin—together.","fields":{"slug":"/news/meta-joins-kotlin-foundation-first-gold-member/"},"frontmatter":{"date":"May 22, 2025","title":"Meta Joins the Kotlin Foundation as the first Gold Member","spoilerSize":250,"coverImage":null}},{"id":"ff1fb5ef-a88f-5f6e-aca8-5fabf66fef77","excerpt":"We’re excited to announce that Block, Inc. has joined the Kotlin Foundation as a Silver Member! Block is dedicated to increasing access to the global economy through its innovative technology. With brands like Square, Cash App, Afterpay, TIDAL, Bitkey, and Proto, Block is making significant strides in transforming commerce, finance, and digital services for everyone.\n\nThis milestone highlights a special, shared history between our engineering teams and the Kotlin community. Block’s journey with Kotlin dates back to 2015, when Square became one of the early adopters of Kotlin for Android, choosing Kotlin for production with Project Kotlin.\n\nThis deep commitment to Kotlin is more than just adoption – Block has actively contributed to Kotlin’s ecosystem. Square’s engineers have developed several popular open-source libraries like OkHttp, the default HTTP client on Android, and Okio, which has now inspired Kotlinx-io, JetBrains’ new multiplatform I/O library. These libraries set benchmarks in reliability and performance, and have been Kotlin-friendly from the start. Additionally, Block’s early adoption of Kotlin Multiplatform allowed their teams to collaborate on a single codebase, sharing business logic across Android, iOS, and backend systems.\n\nAs a Silver Member, Block will continue to support the Kotlin community through funding, expertise, and participation in shaping the future of Kotlin. Their involvement helps ensure Kotlin’s continued growth, especially in industries like fintech.\n\nIn addition to Block’s exciting partnership, we’re also celebrating Meta joining as a Gold Member.\n\nWe’re excited to collaborate with both Block and Meta, and look forward to the valuable expertise and scale they’ll bring to the Kotlin Foundation’s mission.\n\nTo learn more about the Kotlin Foundation and how to get involved, visit the Membership page.\n\nLet’s keep shaping the future of Kotlin—together.","fields":{"slug":"/news/block-joins-kotlin-foundation-silver-member/"},"frontmatter":{"date":"May 22, 2025","title":"Block Joins the Kotlin Foundation as a Silver Member","spoilerSize":250,"coverImage":null}},{"id":"580e2dc8-99a2-55fe-809f-01e98c21b1a4","excerpt":"We’re excited to announce that the Kotlin Foundation Grant Program is back for the third time in 2025. If you’re building and maintaining open-source tools, libraries, or frameworks that support the Kotlin Multiplatform ecosystem or AI, this program is for you. The grant offers financial support and recognition for developers who are helping move the ecosystem forward. We don’t claim any ownership over your work, which means you’ll retain all IP and trademarks. Our goal is simply to support meaningful contributions and help them grow.\n\nTo be eligible, projects should meet a couple of criteria:\n\nOpen-source license. The project should use a permissive open-source license to ensure it remains accessible to everyone and contributes positively to the Kotlin ecosystem.\n\nActive maintenance. The project should be actively maintained and show a history of development and community engagement.\n\nSubmit your grant proposals before June 25, 2025. Submissions will be reviewed by the Kotlin Foundation’s Ecosystem Committee based on impact, project quality, and alignment with Kotlin best practices.\n\nIf you have any questions, feel free to reach out at grants@kotlinfoundation.org or join the conversation in the #kotlin-foundation Slack channel.\n\nWant to see what kinds of projects were selected last year? Take a look here. We’re excited to support your work and see how you’ll help drive the Kotlin ecosystem forward!","fields":{"slug":"/news/kotlin-foundation-grant-program-2025/"},"frontmatter":{"date":"May 22, 2025","title":"The Kotlin Foundation Grant Program Returns in 2025","spoilerSize":250,"coverImage":null}},{"id":"9f009643-85d1-5dae-9ed7-56795b664c76","excerpt":"Developers are at the heart of everything we do. You are the ones who create all of those new things to make the world better. To do that effectively, you need tools to rely on that are powerful yet easy to use. That’s why Kotlin was created. But the language is only a part of the story – you need an entire ecosystem to make things actually work together. That includes various developer tools and, among others, a build system, and an IDE.\n\nFor Kotlin projects, the Gradle Build Tool, also known as Gradle, is often the build system of choice. Gradle, as a powerful and flexible build system, has become a key part of many development processes. Nowadays it is at the core of many server-side, frontend, and mobile projects. It is also the default build system for Android projects.\n\nHowever, great flexibility comes with challenges. Complexity, a steep learning curve, and friction between the IDE, language, and build system can make everyday development harder than it should be. These are not just technical hurdles – they affect your productivity, creativity, and satisfaction. At Google, Gradle, and JetBrains, we recognize this and want to deliver the best possible developer experience. Hence, even before the Kotlin Foundation was created, we worked closely on key ecosystem components and their integrations.\n\nSeveral parties are involved, each playing a unique role in the developer ecosystem:\n\nJetBrains creates the IntelliJ Platform, the foundation for many IDEs, including Google's Android Studio. JetBrains also develops Kotlin, which is the language of choice for Android and also targets multiple other platforms. Google extends the IntelliJ Platform into Android Studio and develops multiple other tools and technologies, tailoring them to the needs of mobile and cloud developers. Gradle powers the build processes that bring your code to life, enabling smooth workflows for testing, packaging, and deployment.\n\nOur tools are deeply interconnected, and the quality of the developer experience depends on how well they work together. By aligning our efforts, we can solve shared problems more effectively and deliver a seamless experience across the entire development stack.\n\nThat’s why JetBrains, Gradle, and Google have joined forces to address these challenges head-on: to simplify configuration, minimize friction between the parts involved, and make development more enjoyable. By working together, we’re not just aiming for incremental fixes – we’re rethinking how our tools interact to create a smoother, faster, and more intuitive experience for developers everywhere.\n\nJoining forces means bringing together feedback and knowledge about user needs. While our audiences intersect, each company still gets unique feedback, so combining our perspectives allows us to see the bigger picture in the industry. Our expertise in specific areas allows us to come up with different ideas and make sure our efforts are aligned and address user needs.\n\nCollaboration in action\n\nThis partnership isn’t just theoretical – it’s a hands-on collaboration.\n\nWe established regular syncs to discuss technical challenges, from build performance to IDE integration and simple bugs. We share knowledge about developer pain points, prioritize solutions, and align on the best approaches. For the last three years, we’ve brought our teams together for intensive, in-person annual summits. These gatherings are opportunities to brainstorm, prototype solutions, reflect on progress, and plan the future of the involved ecosystems, such as Android, Kotlin, Gradle, and software development in general. Beyond technical fixes, we’re aligning on ways to improve the user experience across all of our tools, making sure developers spend less time struggling with configuration and more time building.\n\nThis collaboration is already delivering real results, including:\n\nKotlin DSL as the default for new builds in the Gradle Build Tool since 2023. Better IDE Integration – Gradle sync in IntelliJ IDEA and Android Studio has become faster and more reliable, with clearer feedback when something goes wrong. With the upcoming configuration cache and Isolated Projects, we anticipate further speed increases for end users. Declarative Gradle initiative – A shift towards simpler, more readable, developer-first build configurations that reduce complexity and improve maintainability. Gradle Daemon toolchain support – A common way to define the JVM for the Gradle Daemon and make sure it always starts and does so with the same JVM. Project isolation initiative, which is bringing significant performance gains for large projects, thanks to Gradle’s improvements in isolating subprojects and optimizing caching. A lot of other small Improvements, from better error messaging to faster default configurations. Various ecosystem and educational programs to gather more feedback and share best practices, driven or developed by the Kotlin Foundation committees.\n\nThere are other things in the works which we expect to bring a lot of value for developers. Stay tuned for more announcements!\n\nAreas of focus\n\nWhile we’re proud of what we’ve achieved, there are a lot of things to work on. The priorities for future improvements include:\n\nThe in-IDE experience – Making Gradle and Kotlin integrations seamless, responsive, and intuitive within IDEs. Performance – Reducing sync and build times and ensuring smooth scalability for large, complex projects. Clarity – Simplifying configurations, improving error messaging, providing help, and making tools easier to use.\nWe’re listening: Your feedback matters\n\nEverything we do is based on user the needs and pain points we recognize. The source of this knowledge is your feedback, so please keep it coming! We are listening!\n\nWhether through surveys, issue trackers, or community discussions, we want to hear from you. What’s working? What isn’t? Where can the experience be improved?\n\nWe encourage you to keep sharing your thoughts, ideas, and experiences with us whenever you want. You are welcome to join the relevant channels (e.g. #gradle) inside Kotlin Slack.\n\nLet’s build something better together!","fields":{"slug":"/news/building-better-developer-experience/"},"frontmatter":{"date":"February 20, 2025","title":"Building a Better Developer Experience: A Collaboration Between Gradle, Google, and JetBrains","spoilerSize":null,"coverImage":{"publicURL":"/static/1a4960ac12a6fa583d1d252421dae1de/cover.png"}}},{"id":"72f01ed1-efa7-5f2a-a7ad-f3f98fef1365","excerpt":"Our 2024 Annual Report is now available, offering an overview of last year’s initiatives and milestones within the Kotlin ecosystem. The report covers significant programs such as the Kotlin Multiplatform Student Contest, the Grants Program, and our ongoing involvement in Google Summer of Code. These efforts have continued to foster community engagement and drive the ecosystem’s growth. 2024 marked the addition of new Silver Members: Kotzilla and Uber, enhancing our ability to launch impactful projects. The report details how these partnerships have contributed to advancing the Kotlin ecosystem and highlights the contributions from other Foundation members – JetBrains, Google, Gradle, Touchlab, and Shopify.\n\nYou can also find their noteworthy achievements including the release of Kotlin 2.0 with the stable K2 compiler, the Beta release of Compose Multiplatform for iOS, and significant enhancements across Kotlin tools and libraries. In our commitment to transparency, the report includes a financial summary.\n\nTo explore our 2024 activities and results, and see what’s ahead for the upcoming year, read the full report on our website.\n\nIf you’d like more information about our initiatives or are considering joining as a member, please reach out to us via the #kotlin-foundation channel on Kotlin Slack (join) or email us at hello@kotlinfoundation.org.","fields":{"slug":"/news/annual-report-2024/"},"frontmatter":{"date":"February 17, 2025","title":"The Kotlin Foundation Annual Report 2024","spoilerSize":null,"coverImage":{"publicURL":"/static/a911714d8886b337a983e06c17f0cce6/cover.png"}}},{"id":"1626849a-68b3-5410-848a-5339f9635000","excerpt":"Held annually by the Kotlin Foundation, the Kotlin Multiplatform Contest invites students and recent graduates to showcase their skills and explore multiplatform development. Participants create cross-platform apps that run on Android, iOS, desktop, web, and server, demonstrating the versatility of the Kotlin Multiplatform technology. This year’s response was nothing short of inspiring – we received 55 submissions with 38 eligible entries that met all the contest requirements. After careful deliberation, our panel of judges from the Kotlin Foundation is proud to recognize the top three projects that stood out for their innovation, creativity, technical excellence, and practical impact.\n\nCongratulations to the winners!\n\narandomroom by Andreea-Ștefana Vrabie, University of Copenhagen PayFlo by Valerii Ovchinnikov, Constructor University TinyComposer by Mikołaj Lemański, The School of Management and Banking in Cracow\n\nEach winner will receive a trip to KotlinConf 2025 in Copenhagen, Denmark, including tickets, travel, accommodation, and special Kotlin swag.\n\nWe are incredibly proud of all participants for their hard work and dedication. As a token of appreciation, everyone who submitted a valid entry will receive exclusive souvenirs.\n\nThe contest is over, but learning and creating continue. Join our Slack channel to stay in touch, find resources, get guidance, and explore Kotlin Multiplatform together.\n\nJoin the KMP community\n\nA huge thank-you to everyone who participated and made this contest a success. We can’t wait to see more of your amazing work in the future!","fields":{"slug":"/news/kmp-contest-winners/"},"frontmatter":{"date":"February 04, 2025","title":"Kotlin Multiplatform Contest: Announcing the Winners","spoilerSize":null,"coverImage":{"publicURL":"/static/0a868451ba5a282d3cf7fbe47f1143a9/social.png"}}},{"id":"b9e4370a-50bc-541d-96bb-fe38d2d3a379","excerpt":"The Kotlin Foundation sponsored four projects for the Google Summer of Code 2024, and we are excited to announce the completion of the Adding Android Support to the Gradle Build Server project. This project brought Android project support to the Gradle Build Server. Despite starting with limited Gradle API knowledge, contributor Tanish Ranjan successfully implemented features like composite build support, Java Home handling, and Android project discovery. These enhancements have been integrated into production, enriching Gradle for Kotlin/Android development.\n\nWe thank Tanish Ranjan and the team of mentors from Gradle and Microsoft – Oleg Nenashev, Donát Csikós, Bálint Hegyi, Sheng Chen, and Reinhold – for their valuable contributions to the Kotlin and Gradle ecosystems.\n\nCheck out the project page.\n\nIntroduction\n\nHi everyone, my name is Tanish Ranjan, and last year I participated in Google Summer of Code (GSoC) 2024. I had the amazing opportunity to collaborate with folks from Gradle, Microsoft, and Google to bring Android support to the Gradle Build Server, under the umbrella of the Kotlin Foundation.\n\nToday, I’m excited to share my journey – from finding out about GSoC to completing my project. If you’re considering applying for GSoC or just curious about the experience, hopefully my story will give you some insights!\n\nHow I discovered GSoC (Spoiler: it was last minute!)\n\nI’ll be honest – I had no idea what GSoC was until a friend casually mentioned it to me during a phone call. The kicker? This was just a week before the contributor application was set to open!\n\nWithin that week, I dove deep into learning about GSoC – the fantastic learning experiences and career opportunities it offers. Pretty quickly, I made up my mind to get involved. I started browsing through the list of registered organizations, hoping to find a project related to Android development, since that’s where my skills were strongest.\n\nA LinkedIn post caught my attention – Android developers were talking about how the Kotlin Foundation was one of the organizations participating in GSoC. After going through Kotlin Foundation’s project ideas, one grabbed my attention: adding Android support to the Gradle Build Server. It sounded challenging and aligned perfectly with my skills, so I decided to go for it.\n\nCrafting my proposal (And why it took multiple attempts)\n\nWhen the Contributor Application Phase began, contributors could send in up to three proposals, but I chose to focus all my energy on just one: the project with the Kotlin Foundation.\n\nAt this point, I reached out to the organization admin, which turned out to be a game-changer. They reviewed our proposals, offering feedback on what was missing. One of the most common mistakes (including mine!) was not specifying clear deliverables. Everyone wrote about themselves and the project they wanted to contribute to, but we weren’t clear about what we’d actually deliver.\n\nI had to revise my proposal twice before I was happy with it. Finally, I submitted it.\n\nThe moment of truth: Getting accepted\n\nOn May 1, 2024, the accepted contributors were announced. I remember that night clearly. I was working on a freelance project when I received an email at around 11:30 pm with the subject: “Congratulations, your proposal with Kotlin Foundation has been accepted!”\n\nI couldn’t contain my excitement – I was literally bursting with joy! Having just graduated high school in 2023 and not started university yet, the opportunity to work with industry professionals from Google, Microsoft and Gradle felt surreal.\n\nWith my proposal accepted, I dove into researching technologies I’d need for the project, such as JSON-RPC and Build Server Protocol (BSP), while also setting up my work environment.\n\nCommunity Bonding Phase: Meeting the Team\n\nThe first formal step was the Community Bonding Phase. A meeting was organized to introduce all the mentees to the team and admins, where we discussed the projects and how to approach them and set up regular sync-up meetings.\n\nThis phase helped us ease into the collaboration and set the stage for the real coding to begin.\n\nFirst coding phase: Learning Gradle from scratch\n\nWhen the first coding phase started, I was assigned my first task: adding composite build support to the Gradle Build Server. Here’s the catch – I had no prior experience with the Gradle API or the Gradle Tooling API. So far I had only skimmed the tip of the iceberg by using Gradle in building Android projects.\n\nThe first few weeks were tough, as I struggled to get up to speed. But here’s a key lesson I learned: It’s perfectly okay not to know everything at the start. Mentors are there to guide you, but it’s important to do your own research and tackle hurdles first. When you’re stuck, that’s when mentors step in and provide the support you need.\n\nOnce I got comfortable with the technologies and Gradle Build Server project, my work pace picked up. After completing the LanguageExtension downcast fix (which turned out to be a prerequisite for my first task), I tackled the composite builds. This led to my first task being merged just in time for my mid-term evaluation.\n\nMid-term evaluation and a new challenge\n\nA few weeks before the mid-term evaluation, a new task was added to my GSoC project: Android project discovery for the Gradle Build Server. This was a significant addition, but I was excited for the challenge.\n\nWhile the evaluations were being processed, I also started working on Java Home Handling in the Gradle Build Server. Juggling these tasks allowed me to stay ahead and keep making progress.\n\nGradle in Google Summer of Code 2024 - Mid-Term Project Demos\n\nFinal coding phase: Tackling the hardest part\n\nThe final coding phase began with me completing Java Home Handling and submitting a pull request. However, a new update of Gradle for Java extension delayed the PR’s merge. But this delay actually worked in my favor – it gave me time to reconsider our approach to handling Java Home.\n\nOne of my mentors advised against over-engineering the implementation, as it could obscure the logic of Java Home selection and confuse users. Simplifying the approach meant reworking the implementation, but it resulted in a clearer and better experience overall. It was a win-win for the end users.\n\nMy final and most challenging task was adding Android project discovery. This involved working with the AGP (Android Gradle Plugin) API, which had very little documentation on extracting project information for language features.\n\nI reached out to my organization admin, and they connected me with developers from Google who work on AGP. Collaborating with them helped me extract most of the required information. For anything that the AGP API didn’t publicly expose, I found creative workarounds.\n\nBy the end, I successfully added Android project support to the Gradle Build Server! And here’s the most exciting part: every piece of code I wrote was integrated directly into production. Each of my contributions was merged into the next release of the Gradle Build Server, meaning the work I did became part of the official releases of VSCode’s Gradle for Java extension!\n\nWrapping up: Reflections on my GSoC experience\n\nCompleting this project was an incredibly rewarding experience. Not only did I gain technical skills, but I also learned the value of collaboration and communication, and being persistent when tackling challenging tasks.\n\nTo anyone considering GSoC, especially beginners: go for it! Don’t worry if you’re not an expert – this program is all about learning. And trust me, it’ll be one of the most fulfilling experiences of your programming career.\n\nThanks for reading about my GSoC journey. Feel free to drop me any questions or thoughts! 🙂\n\nIf you’re interested in the technical details of what I contributed, be sure to check out my project page for an in-depth look at my work on the Gradle Build Server.","fields":{"slug":"/news/gsoc-2024-adding-android-support-to-gradle-build-server/"},"frontmatter":{"date":"January 21, 2025","title":"Google Summer of Code 2024 – Adding Android Support to the Gradle Build Server","spoilerSize":null,"coverImage":{"publicURL":"/static/40e346b13f8589ca2ac5293e4c79a24f/cover.png"}}},{"id":"9085d007-36ea-52b2-a759-e1a04b2fbab1","excerpt":"The Kotlin Foundation sponsored a project to implement Android support in the kotlinx-benchmark library as part of Google Summer of Code 2024, and we are excited to announce its completion. Thank you to Qizhao Chen and the mentor team from Google and JetBrains – Abduqodiri Qurbonzoda, Dustin Lam, and Rahul Ravikumar – for your great input.\n\nCheck out the kotlinx-benchmark library.\n\nIntroduction\n\nThe kotlinx-benchmark library is an open-source tool for benchmarking Kotlin code on various platforms, including the JVM, JS, wasmJs, and native. However, the library lacks support for benchmarking on Android. This project integrated this functionality using the existing Android benchmarking library androidx.benchmark to ensure that the current functionality supports Android as well.\n\nGoals of the project\n\nThe main goals for this project were to:\n\nAutomatically detect Android targets in Kotlin Multiplatform projects and retrieve the corresponding compilation output. Create a template Android project that can be used to run the benchmarks. Retrieve benchmark annotations from the Android target and use the androidx.benchmark library to run these benchmarks in the generated project. Display the benchmark results in the console during execution and write the final results to a file for further analysis.\nAchievements\n\nThe project yielded the following key achievements:\n\nAndroid target detection and compilation output: Implemented detection of Android targets in Kotlin Multiplatform projects and retrieval of the necessary compilation outputs. Template Android project generation: Developed a mechanism to generate a template Android project in the build directory, allowing benchmarks to run seamlessly in an Android environment. Annotation mapping and code generation: Decompiled the compilation output of the Android target and retrieved the annotations with associated data, mapped the annotations to the androidx.benchmark configuration, and generated the necessary benchmark code that can be run by the androidx.benchmark library. Test validation: Ensured that the template project and generated code could compile and run successfully on environments, validating the flexibility and robustness of the solution. Capture and reporting of benchmark results: Captured benchmark data from Logcat during execution, with measurement data output to the console and the final benchmark results being written in a file.\nNext steps\n\nFurther improvements will focus on:\n\nAdding Android-specific configuration options to enhance flexibility when running benchmarks. Fetching raw benchmarking results from androidx.benchmark in binary format to replace the current Logcat-based data capture method.","fields":{"slug":"/news/gsoc-2024-android-support-in-kotlinx-benchmark/"},"frontmatter":{"date":"January 21, 2025","title":"Google Summer of Code 2024 – Android Support in `kotlinx-benchmark`","spoilerSize":null,"coverImage":{"publicURL":"/static/40e346b13f8589ca2ac5293e4c79a24f/cover.png"}}},{"id":"c4ac9f51-4fce-5b3e-a254-688ccee88254","excerpt":"The Kotlin Foundation sponsored four projects for the Google Summer of Code 2024, and we are excited to announce the completion of the “Incremental Compilation for the Kotlin/Wasm Compiler” project! JetBrains, a Kotlin Foundation member, provided mentoring support for this project. This project enhanced the Kotlin-to-Wasm compiler with incremental compilation capabilities, reducing build times by allowing it to recompile only modified files. The contributor, Osama Ahmad, optimized and reused components from the Kotlin/JS backend while improving documentation and refactoring the codebase.\n\nThanks to Osama Ahmad and the mentor from JetBrains, Igor Yakovlev, for their great input!\n\nExplore Kotlin/Wasm.\n\nIntroduction\n\nIncremental compilation is a technique that helps increase compilation speed by recompiling only changed files instead of your whole program (a clean build). The Kotlin-to-Wasm compiler is used to support only clean builds, but during this project, we enhanced it to support incremental compilation, too.\n\nGoals of the project\n\nThe primary goals for the project were:\n\nTo implement incremental compilation for the Wasm backend. To reuse code as much as possible from the JavaScript backend. To specialize and optimize incremental compilation for Wasm.\nAchievements\n\nDuring the project, the following key achievements were made:\n\nIncorporation of incremental compilation: Now, the Wasm backend supports incremental compilation in addition to performing clean builds. Code reuse: Many of the incremental compilation components were reused from the JavaScript backend and are specialized to work with the Wasm backend as well. One example is the CacheUpdater component, which determines the files for which we can use cached compiled files and the files that need to be recompiled, and updates the cached files as appropriate. Optimizations: Multiple optimizations have been tried. Some are not worth the complexity they’ll introduce, such as trying to resolve struct field IDs in link time, but some have been successfully applied, such as the relocation of most bodiless declarations before starting the compilation process. Documentation and refactoring: As a side effect of incorporating incremental compilation, the codebase became more complex and needed some refactoring and documentation for easier future development. One example is breaking the final linking function, linkWasmCompiledFragments, into multiple smaller and clearer functions, along with the necessary documentation.Newly introduced components such as WasmSerializer and WasmDeserializer are well documented, as well.\nNext steps\n\nThrough benchmarking, we found that the time taken to serialize and deserialize Wasm cached compiled files majorly contributes to linking time. This is because a single Wasm binary is produced, and each time a change is made, we need to load (deserialize) all cached compiled modules and link all of them in a single binary, even if only a single file in a single module was changed.\n\nOne solution to this problem is to implement per-module compilation, in which each Kotlin module is compiled to a standalone Wasm binary, and utilize Wasm features to link between the different module Wasm binaries. This way, we don’t need to load every module and link all of them into a single binary on each recompilation.","fields":{"slug":"/news/gsoc-2024-wasm-incremental-compilation/"},"frontmatter":{"date":"January 21, 2025","title":"Google Summer of Code 2024 – Incremental Compilation for the Kotlin/Wasm Compiler","spoilerSize":null,"coverImage":{"publicURL":"/static/40e346b13f8589ca2ac5293e4c79a24f/cover.png"}}},{"id":"42465459-0101-5284-81a3-e9f834deaabc","excerpt":"The Kotlin Foundation facilitated mentorship for several projects during the Google Summer of Code 2024, and we are excited to announce the completion of a project for a composable functions gallery generator! WhiteScent, a part-time computer science student and Android enthusiast, contributed to this project, and Artem Kobzar, a software engineer working on Kotlin/Wasm at JetBrains, served as the mentor.\n\nThe project aimed to develop a Gradle Plugin and runtime library to describe and generate a multiplatform (web, desktop, iOS, and Android) gallery app that shows all of the described composable functions individually in a single location.\n\nExplore Storytale on GitHub.\n\nIntroduction\n\nAt the beginning of the React era of web development, Storybook’s proposed approach of describing component states and generating the whole UI library gallery is still one of the most common approaches to documentation in web development.\n\nJetpack Compose, the declarative UI framework developed by Google, has advanced rapidly, and JetBrains has extended this technology across multiple platforms. The result is Compose Multiplatform, a framework for sharing UIs across Android, iOS, web, and desktop.\n\nWith Compose UI, you can easily write components for your multiplatform apps. But what if you could visually integrate the components you’ve written into one place?\n\nThat's exactly what our project Storytale aims to accomplish.\n\nProject goals\n\nFirst, we plan to create a Compose Multiplatform app that can showcase all of the created components. Leveraging the power of the multiplatform technology, you'll be able to seamlessly view your components across various platforms.\n\nTo achieve this, we will:\n\nDevelop a Gradle plugin that provides separate source sets and tasks for generating the gallery. Build a runtime library to describe the different states of composable functions. Create a multiplatform UI that is available for all of the platforms.\n\nWe will also provide developers with a set of runtime APIs and Gradle tasks, which will help simplify the process of writing components that need visualization in your projects.\n\nLet's write a simple use case, assuming we have a PrimaryButton component.\n\n@Composable  \nfun PrimaryButton(  \n  text: String,  \n  onClick: () -> Unit = {},  \n  enabled: Boolean = true  \n) {  \n Button(onClick = onClick, enabled = enabled) {  \n   Text(text)\n }  \n}\n\n\nIn the project, we can create a commonStories folder and then write the following code:\n\nval PrimaryButton by story {  \n  val enabled by parameter(true)  \n  val text by parameter(\"Click Me\")\n\n  PrimaryButton(text = text, enabled = enabled)  \n}\n\n\nThen, depending on the target platform, we can run the storiesRun command, and we'll be able to see this visualized component on the corresponding platform. We'll also be able to edit PrimaryButton's text and enabled parameters. That's it!\n\nHere is a demo of the generated gallery for an example project working on Android, iOS, and desktop: https://youtu.be/9IYsHYakMuM\n\nThe source code of the described stories is here.\n\nNext steps\n\nWe've experimented with the feasibility of many aspects in this project, and so far the results look promising! Here are the future improvements we are planning to make:\n\nExtending the runtime API to describe enums and modifiers and to provide variation themes. Integrating Dokka documentation into the Composable function stories. Implementing an IntelliJ IDEA plugin to support an @Preview-like experience for a single story.\n\nThanks to WhiteScent and Artem Kobzar for creating this tool and making the Compose Multiplatform tools ecosystem even richer!\n\nFeel free to share your ideas and contributions to our project: Storytale on GitHub!","fields":{"slug":"/news/gsoc-2024-storytale/"},"frontmatter":{"date":"January 21, 2025","title":"Google Summer of Code 2024 – Storytale Compose Multiplatform Component Gallery Generator","spoilerSize":null,"coverImage":{"publicURL":"/static/40e346b13f8589ca2ac5293e4c79a24f/cover.png"}}},{"id":"b9331e31-2aa5-5934-a086-d86e070bc413","excerpt":"The Kotlin Foundation’s Ecosystem Committee is happy to name the winners of the second round of our grants program! We received 59 applications from library project authors across the Kotlin ecosystem. After carefully reviewing all of the entries, we’re excited to introduce the five lucky winners: Konsist – A linter that ensures consistency in Kotlin projects by enforcing a cohesive code structure and unified architecture. The proposal: Add new functionality based on community feedback. Improve architectural assertions to allow more flexible rules. Integrate with the K2 compiler for real-time error and warning notifications in the IDE. Compose Rich Editor – A rich text editor library for Compose Multiplatform, customizable and supporting common rich text editor features. The proposal: Expand platform support and add features like undo/redo and copy/paste for rich text. Achieve API stability and expose useful internal APIs for better control. Build a DSL for rich text creation. Multiplatform Settings – A library for multiplatform apps that enables key-value data persistence in shared code. The proposal: Stabilize experimental coroutines and serialization integrations. Fix crashes related to Keychain usage. Add missing platform implementations. Migrate documentation to a dedicated site and include dokka output. Ultron – A framework for developing UI tests for Android and Compose Multiplatform, built on the Espresso, UI Automator, and Compose UI testing frameworks. The proposal: Stabilize multiplatform support, including enhanced test reporting (Allure integration). Improve Compose UI testing components. Orbit MVI – A simple MVI framework for Kotlin Multiplatform. The proposal: Improve guidance around Multiplatform, including lifecycle management, state persistence, and more. Utilize Kotlin 2.x features. Support desktop platforms. Integrate Compose Multiplatform. Explore JS and WASM compatibility. Add practical examples and tips to the documentation. Implement logging and time travel debugging features.\n\nThese open-source projects truly distinguished themselves with their inspiring ideas, quality of implementation, and alignment with the Grants Program criteria.\n\nEach winner will receive $6,000 to help develop and improve their projects, along with recognition from the Kotlin Foundation.\n\nWe encourage all applicants who did not receive a grant this time to continue developing their projects and keep an eye out for future opportunities. Follow us on our website and social media for updates and the announcement of subsequent rounds of the Grants program.","fields":{"slug":"/news/grants-program-winners-24/"},"frontmatter":{"date":"October 01, 2024","title":"Winners of the Kotlin Foundation Grants Program 2024","spoilerSize":null,"coverImage":{"publicURL":"/static/484ba0fca4f55297c434eec881fb8fc1/cover.png"}}},{"id":"342a116e-a27f-5db4-a63d-c0a9d999560f","excerpt":"We are thrilled to announce that Kotzilla has joined the Kotlin Foundation as a Silver member. This new partnership will advance the ecosystem and enrich the Kotlin community. The Kotzilla team has put significant effort into the advancement of Kotlin, especially with the creation of Koin, an open-source dependency injection (DI) framework. Koin helps developers manage their dependencies efficiently, write clean and modular code, as well as develop scalable and maintainable applications. Known for its simplicity and effectiveness, Koin is fully compatible with Kotlin Multiplatform (KMP) and Compose Multiplatform, enhancing the development of seamless and efficient mobile apps. Currently, Koin is used in over 350,000 mobile applications worldwide and has more than 9 million downloads each month, highlighting its essential role in the Kotlin ecosystem.\n\nAdditionally, the Kotzilla team is developing other tools like the Kotzilla Platform that further support the community in creating safer, faster, and more scalable applications.\n\n“Our partnership with the Kotlin Foundation will further propel our mission to make developers' lives easier,” says Arnaud Giuliani, Koin Framework Creator and Lead at Kotzilla.\n\nAs a member of the Kotlin Foundation, Kotzilla will significantly contribute to the Foundation's initiatives, including the grants program for open-source library authors.\n\nTo learn more about the Kotlin Foundation and how members like Kotzilla are contributing to and benefiting from its mission, please visit the membership page. Join us in shaping the future of the Kotlin ecosystem!","fields":{"slug":"/news/kotzilla-joins-kotlin-foundation-silver-member/"},"frontmatter":{"date":"August 06, 2024","title":"Kotzilla Joins the Kotlin Foundation as a Silver Member","spoilerSize":178,"coverImage":null}},{"id":"653ee184-b590-5f74-baa9-2da4e50534ad","excerpt":"We are pleased to announce the launch of the second round of the Kotlin Foundation Grants Program. Following the success of last year's initiative, we’re continuing our commitment to support developers who significantly contribute to the Kotlin ecosystem. This year, the program continues to offer financial awards and recognition to developers within the Kotlin community who maintain active and valuable libraries, tools, and frameworks. Importantly, we do not claim any intellectual property rights or trademarks from the authors we assist, believing that contributors should retain ownership of their work.\n\nTo be considered, submitted projects need to fulfill the following criteria:\n\nOpen-Source License — Projects must be available under a permissive open-source license to ensure they remain accessible to everyone and contribute positively to the Kotlin ecosystem. Active Maintenance — Projects should be actively maintained with a consistent development history and contributions.\n\nSubmit your grant proposals before June 25, 2024. The Kotlin Foundation's Ecosystem Committee will evaluate submissions based on their potential impact on the Kotlin Multiplatform ecosystem, adherence to best practices, and responsiveness to bug reports and security concerns.\n\nIf you have any questions or would like further information related to the program, please contact us at grants@kotlinfoundation.org or join the discussion in the #kotlin-foundation Slack channel. We look forward to seeing your innovative contributions and supporting your efforts to advance the Kotlin Multiplatform ecosystem!\n\nTo see the winning projects from last year, check out our previous announcement.","fields":{"slug":"/news/grants-program-continues-in-2024/"},"frontmatter":{"date":"May 23, 2024","title":"The Kotlin Foundation Grants Program Continues in 2024","spoilerSize":255,"coverImage":null}},{"id":"98c182f8-b5a0-52a2-beb6-0fc3f952b814","excerpt":"We’re delighted to share that Uber has joined the Kotlin Foundation as a Silver Member. With another industry leader on board, we have even greater opportunities to support and advance Kotlin. Uber's commitment to Kotlin is evident in its extensive codebase. Besides embracing Kotlin, Uber is also actively contributing to the Kotlin ecosystem. This includes developing integrations for Kotlin with build systems like Buck, Bazel, and Gradle. Uber has also contributed to Detekt's development and initiated the creation of its compiler plugin version.\n\nFurthermore, they helped establish the enterprise Java-to-Kotlin working group, a collaborative effort involving Meta, Google, JetBrains, and Uber themselves. The group's main goal is to provide companies with the tooling and expertise needed to migrate large legacy Java codebases to Kotlin and to encourage contributions to these tools.\n\nAs a Silver Member, Uber will play a crucial role in supporting the Foundation's initiatives, like the Grants program for open-source library authors and the Kotlin Multiplatform Contest for students. Their expertise will be invaluable in advancing the Kotlin ecosystem, and we are excited to collaborate with them on future projects.\n\nTo learn more about the Kotlin Foundation and our initiatives, please visit the Membership page. Join us and shape the future of the Kotlin ecosystem!","fields":{"slug":"/news/uber-becomes-kotlin-foundation-silver-member/"},"frontmatter":{"date":"May 23, 2024","title":"Uber Becomes Kotlin Foundation Silver Member","spoilerSize":260,"coverImage":null}},{"id":"81c51704-dd2f-5298-8367-969d7b2c4afb","excerpt":"The Kotlin Foundation recently hosted the Kotlin Multiplatform Contest for the second year in a row, inviting students and recent graduates to showcase their skills. Participants created applications for Android, iOS, desktop, web, and server, showcasing the versatility of Kotlin Multiplatform. We received submissions from around the world, and a panel of judges selected three winners. The winners won a trip to KotlinConf’24 in Copenhagen, including tickets, travel, accommodation, and Kotlin swag. All qualifying participants also got some Kotlin souvenirs.\n\nMeet the winners:\n\nPatrycja Bachleda, from the Florida Institute of Technology, USA, is the author of College Advisor. College Advisor provides financial insights about universities and majors, aiding students in making financially savvy decisions. The judges applauded the use of Compose Multiplatform in the project.\n\nSamson Aricha Momanyi, from the Technical University of Mombasa, Kenya, is the author of Organiks. Organiks is a digitizing tool for the agricultural sector in Africa. The project is built for Android and desktop using Ktor for server and Gemini AI. The judges commended the usage of Ktor for server-side, highlighted the compelling storytelling aspect, and appreciated the offline-first approach.\n\nCaleb Asira Etemesi, from Strathmore University, Kenya, is the author of Pixly. Pixly is an image editor built using Compose Multiplatform that works on Windows, Linux, and Android devices. The judges recognized the project's creativity and uniqueness in employing a Rust library as a backend.\n\nCongratulations to Patrycja, Samson, and Caleb! Your mastery of Kotlin Multiplatform has made a significant impact. As we look forward to KotlinConf’24, let's continue exploring and shaping the Kotlin landscape!","fields":{"slug":"/news/kotlin-multiplatform-contest-winners-spotlight/"},"frontmatter":{"date":"May 14, 2024","title":"Kotlin Multiplatform Contest Winners Spotlight","spoilerSize":582,"coverImage":{"publicURL":"/static/40fa4c35c07201bfdd6d30c41362a081/cover.png"}}},{"id":"76ee1415-0bef-5e48-bdab-fd4c206966a3","excerpt":"We’re delighted to announce the appointment of Hadi Hariri as the new President of the Kotlin Foundation. Having been an integral part of the Kotlin community for many years, Hadi's passion for open-source development and deep understanding of developers' needs make him the perfect candidate to drive the Kotlin Foundation forward. With this transition, the Foundation looks forward to embracing new perspectives and reaching new milestones. In addition to this announcement, the Kotlin Foundation would also like to extend its heartfelt gratitude to the former President, Max Shafirov, for his exceptional contribution. Through Max’s strategic direction, the Kotlin Foundation has been able to foster an inclusive and vibrant community of developers, leading to extensive collaboration and continuous innovation within the Kotlin ecosystem.\n\nAs the torch passes from Max to Hadi, the Kotlin Foundation is excited about its current momentum and looks forward to an even brighter future. Together, with the support of the Kotlin community, the Foundation endeavors to further enhance Kotlin's reach and impact, empowering developers to create exceptional solutions.\n\nNew Board Member\n\nEgor Tolstoy has been appointed as a new board member. Being the Kotlin Project Lead at JetBrains and having led the Kotlin Product Management team before that, Egor's thorough knowledge of the ecosystem and its innovative product vision make him a valuable addition to the Foundation.","fields":{"slug":"/news/new-president-and-new-board-member-appointed/"},"frontmatter":{"date":"February 27, 2024","title":"New Kotlin Foundation President and New Board Member Appointed","spoilerSize":260,"coverImage":null}},{"id":"2bf271fb-ac8a-5f83-89ff-ff095b6b3769","excerpt":"We have published our 2023 Annual Report, detailing this year's activities and plans for the Kotlin ecosystem. The report outlines several key initiatives, including the Grants Program, our participation in Google Summer of Code, and the Kotlin Multiplatform Student Contest. These programs have supported the growth of the Kotlin community and contributed to the ecosystem's development. The report provides a financial overview, demonstrating our commitment to transparency. It also details the individual contributions to the Kotlin Ecosystem from each member, including JetBrains, Google, Gradle, Touchlab, and Shopify.\n\nFor more details on our activities in 2023 and our plans for the next year, the full report is available on our website.\n\nFor further information about us and our projects, or if your company is interested in joining as a member, please contact us via the #kotlin-foundation Slack channel or email at hello@kotlinfoundation.org.","fields":{"slug":"/news/annual-report-2023/"},"frontmatter":{"date":"February 02, 2024","title":"The Kotlin Foundation Annual Report 2023","spoilerSize":null,"coverImage":{"publicURL":"/static/3ea51f525602a249f16ca0178d4635ae/cover.jpg"}}},{"id":"ae8cea3f-54ad-592f-99d9-094cae189ed1","excerpt":"The Kotlin Foundation sponsored four projects for the Google Summer of Code 2023, and we are excited to announce the completion of a project to enhance the kotlinx-benchmark library! JetBrains, a Kotlin Foundation member, provided mentoring support for this project. The contributor to this project was Henok Woldesenbet, an aspiring software engineer and the mentor was Abduqodiri Qurbonzoda, a software developer working on Kotlin libraries at JetBrains. The project aimed to improve the kotlinx-benchmark library API and user experience.\n\nIntroduction\n\nThe kotlinx-benchmark library is an invaluable open-source tool that facilitates the benchmarking of multiplatform code written in Kotlin. Despite its essential function, its user experience had some gaps, confusing users and lacking features that developers have come to expect from benchmarking libraries.\n\nGoals\n\nThe primary goals for the project were:\n\nInfuse the library with clear and concise documentation, supplemented with practical usage examples. The absence of comprehensive documentation previously made using kotlinx-benchmark challenging for many, especially newcomers. Address user concerns and lint the library API, making it more intuitive and user friendly. Refine the library's internals, including by enhancing integration tests, improving error feedback through refined validations and task descriptions, and streamlining the profiler's execution process. Elevate the overall user experience, transforming the kotlinx-benchmark from a budding tool into a robust library that the Kotlin community can rely on.\nAchievements\n\nHere are the primary achievements made in the Google Summer of Code project:\n\nDocumentation for increased accessibility: Detailed documentation was added, ensuring that anyone, from novices to experts, could dive into, experiment with, and harness the power of the library. Improved error messages: A library's UX is significantly influenced by the quality of its error feedback. Error messages were revamped, ensuring they are not only accurate but also instructive, guiding users towards solutions. Refined integration tests: Comprehensive integration tests were added to ensure stability across a variety of use cases. Tech stack modernization: The library was migrated to the latest versions of Gradle and JMH, and transitioned from Groovy DSL to the latest version of Kotlin DSL to optimize the build scripts. Streamlined profiler usage: In response to feedback from our users, the process of running profilers was simplified, facilitating a smoother user experience.\nNext Steps\n\nTo further enhance kotlinx-benchmark, we are planning to:\n\nSupport the Android target and integrate the androidx.benchmark framework into kotlinx-benchmark. Implement an IntelliJ IDEA plugin to support running benchmarks with a click of a run button, the same way as running unit tests.\n\nIf you'd like to help continue improving kotlinx-benchmark, check out the open issues for ideas on where to jump in.\n\nThank you Henok and Abduqodiri for making kotlinx-benchmark even better for Kotlin developers!","fields":{"slug":"/news/gsoc-2023-kotlinx-benchmark/"},"frontmatter":{"date":"January 09, 2024","title":"Google Summer of Code 2023 – Enhancing kotlinx-benchmark's API and User Experience","spoilerSize":null,"coverImage":null}},{"id":"49ba8d96-e4cf-5117-b5f0-b88f14120e7b","excerpt":"The Kotlin Foundation sponsored four projects for Google Summer of Code 2023, and we are excited to announce the completion of the Parallel Stacks for Kotlin Coroutines in the Debugger project, for which Google, a Kotlin Foundation member, provided mentoring support. Today we'd like to share the details of the project with you. The primary contributor to this project was Raehat Singh Nanda, a computer science undergraduate, mentored by Nikita Nazarov, Kotlin Compiler Engineer on the Android team at Google. The project aimed to provide a visual way to debug applications using multiple coroutines.\n\nProject Goals\n\nWhile coroutines streamline asynchronous coding, debugging multiple coroutines can pose challenges, especially in large-scale applications. IntelliJ IDEA's Coroutines tab provides the ability to visualize coroutines, but it doesn't provide functionality to understand the connections between different but related coroutines.\n\nThe new Coroutine Stacks IntelliJ IDEA plugin provides a graphical depiction of numerous coroutines in specific application states. This innovation draws inspiration from the Parallel Stacks feature found in established IDEs such as JetBrains Rider, JetBrains CLion, and Microsoft Visual Studio.\n\nUpon initiating the IntelliJ IDEA debugger and encountering a breakpoint, an application enters a suspended state. Then, the Coroutine Stacks panel displays a parallel stack view that facilitates in-depth analysis for debugging purposes.\n\nCoroutine Stacks\n\nConsider the following code sample with multiple coroutines:\n\nimport kotlinx.coroutines.*\n\nfun main() = runBlocking<Unit> {\n    launch {\n        withContext(Dispatchers.Default) {\n            println()\n            delay(1000)\n        }\n    }\n    \n    \n    launch {\n        withContext(Dispatchers.Default) {\n            println()\n            delay(1000)\n        }\n    }\n}\n\n\nLet’s add a breakpoint on the following line:\n\nTo open the Coroutine Stacks panel, click in the bottom right-hand corner of your main IDE panel:\n\nAfter the debugger stops at the breakpoint and opens the panel, you will see something like this:\n\nThe Coroutine Stacks panel shows a graphical representation of different stack traces from different coroutines.\n\nFrom the image above, it is clear that there are two coroutines in the application. Their stack traces share a number of frames up until resumeWith. After that, the control flow of these coroutines diverges. The stack trace with the blue border refers to the coroutine that contains the current breakpoint. The frames highlighted in yellow come from libraries. You can hide library frames by clicking the filter button:\n\nNow you can see that the stack traces of the two running coroutines only have library frames in common.\n\nIn the example, all coroutines are running on the same dispatcher, but you can switch the dispatcher by using the dropdown menu at the top of the panel:\n\nUse the minus button to zoom out. You can return to normal size by clicking the plus or the 1:1 button:\n\nYou can also add coroutine creation frames by clicking this button:\n\nThe creation frames are highlighted in blue. For more complex examples, the coroutine trace graph can change dramatically after the creation frames are added.\n\nClick the photo button to capture a coroutine dump:\n\nYou can click on the frames to navigate to the corresponding source code position:\n\nInstallation\n\nGo to Settings / Preferences | Plugins in IntelliJ IDEA.\n\nSwitch to Marketplace and search for Coroutine Stacks:\n\nSelect the plugin and click Install.\n\nAfter the installation has been completed, restart the IDE.\n\nFeel Free to Contribute!\n\nThis is just the beginning! With new ideas and features, we can improve the tool to cover more use cases. If you’ve found a bug, don’t like how a feature works, or have other feedback, feel free to open an issue in our official GitHub repository: https://github.com/google/coroutine-stacks\n\nThank you to Raehat and Nikita for building an awesome new tool to help developers be more productive!","fields":{"slug":"/news/gsoc-2023-parallel-stacks/"},"frontmatter":{"date":"January 08, 2024","title":"Google Summer of Code 2023 – Parallel Stacks for Kotlin Coroutines in the Debugger","spoilerSize":null,"coverImage":null}},{"id":"168c60a6-92cc-5044-a4b2-557d959cc333","excerpt":"The Kotlin Foundation sponsored 4 projects for the Google Summer of Code 2023 and we are excited to announce the completion of the KFlogger project, an experimental Kotlin Multiplatform version of Google's Flogger logging library! The contributor to this project was Giancarlo Buenaflor, a computer science undergraduate, and the mentor was Mark Mann, a Kotlin Multiplatform engineer at Google. Introduction\n\nFlogger, Google's default logging framework for JVM projects, opens up new opportunities for efficient cross-platform logging. The KFlogger project aims to enable the integration of Flogger into iOS and JVM, benefitting from the multiplatform capabilities of Kotlin.\n\nKFlogger incorporates the existing JVM Flogger codebase as a Java module, preserving its core functionality. The JVM implementation remains largely untouched and is directly actualized through the actual typealias mechanism. On the iOS side, KFlogger introduces a default logging backend based on OSLog.\n\nHere is a demo of this working on Android and iOS:\n\nGetting Started\n\nTo use KFlogger, add the following dependency to your commonMain sourceSet:\n\n// Find the latest version \n// on https://mvnrepository.com/artifact/com.giancarlobuenaflor/kflogger\nimplementation(\"com.giancarlobuenaflor:kflogger:0.0.3\")\n\n\nThis will allow you to start simple logging. Add the KFluentLogger instance to your class and then you can start logging through your common code:\n\nimport com.giancarlobuenaflor.kflogger.KFluentLogger\n\nclass LoggingClass {\n    private val logger = KFluentLogger.forEnclosingClass()\n    \n    fun log() {\n        logger.atWarning().log(\"string: %s\", \"example\")\n        logger.atWarning().log(\"integer: %d:\", 1)\n        logger.atWarning().log(\"float: %f\", 1.0f)\n        logger.atWarning().log(\"%d%% %s\", 100, \"chance\")\n    }\n}\n\n\nThe source is in a GitHub repository and we'd love your feedback and contributions!\n\nThank you Giancarlo and Mark for helping make Kotlin Multiplatform even better!","fields":{"slug":"/news/gsoc-2023-kflogger/"},"frontmatter":{"date":"January 08, 2024","title":"Google Summer of Code 2023 - KFlogger (Kotlin Multiplatform Flogger)","spoilerSize":null,"coverImage":null}},{"id":"35934900-85cb-523f-b9dd-f5f8a1ee9b2b","excerpt":"The Kotlin Foundation sponsored 4 projects for the Google Summer of Code 2023, and we are excited to announce the completion of the Eclipse Gradle Kotlin Script Support project! Gradle, a Kotlin Foundation member, provided mentoring support for this project, and we'd like to share details about the project. The contributor to this project was Nikolai Vladimirov, a third-year student from Constructor University, and the mentor was Donát Csikós, a Senior Software Engineer at Gradle. The project aimed to bring support for Gradle Kotlin Scripts (.kts) to the Eclipse IDE.\n\nThe initial goal was to improve user interaction with Gradle Kotlin scripts inside the Eclipse IDE. The goal was to implement the following functionality:\n\nSyntax highlighting for Kotlin scripts Content assistance Go-to-definition Accurate diagnostics for syntax errors Signature help Hovering\n\nNikolai successfully delivered these features by implementing support for Kotlin scripts based on the existing kotlin-language-server project, creating a new system to separate compilation environments for each build script. Here are examples of each feature:\n\nSyntax highlighting for .kts scripts\n\nContent assistance\n\nGo-to-definition\n\nAccurate Diagnostics for syntax errors\n\nSignature help\n\nHovering\n\nInstallation\n\nThe new features are not yet production-ready, and it currently does not work on Windows. Consequently, they are delivered as optional installables. You can find them in the latest update sites under the Buildship Extras - Incubating category.\n\nNext Steps\n\nIf you'd like to get involved with improving the Eclipse Kotlin Gradle Script support, there are two parts:\n\nEclipse plugin: The plugin is part of the Buildship project. The implementation is in the org.eclipse.buildship.kotlindsl.provider subproject. Language server: The IDE-agnostic components are implemented in this repository in the GSoC-work branch.\n\nThe remaining tasks are to add a couple of minor features and incrementally improve the reliability, stability, and performance of this plugin.\n\nWe are grateful for Nikolai and Donát's contributions to making Kotlin better for developers!","fields":{"slug":"/news/gsoc-2023-eclipse-gradle-kotlin/"},"frontmatter":{"date":"January 05, 2024","title":"Google Summer of Code 2023 – Eclipse Gradle Kotlin Script Support","spoilerSize":null,"coverImage":null}},{"id":"72da5ba2-df88-57d6-86a1-c0f205dc0d6f","excerpt":"Dear Kotlin Community, We would like to announce recent changes in the Kotlin Foundation:\n\nNew Lead Language Designer\n\nMikhail Zarechenskii has been voted in unanimously as the Lead Language Designer by the Founding members of the Foundation. Mikhail has been an integral part of the Kotlin team and has been working on the compiler, as well as tooling for a number of years. His current role at JetBrains is lead of the Language Evolution Team, making him the perfect candidate for this role.\n\nNew Board Member\n\nHadi Hariri has been unanimously voted in as board member. Hadi has been in the Kotlin community from the very early days and has been actively involved in the Kotlin Foundation from its inception, serving both on the Operating Committee, as well as the Trademark Committee. He currently oversees Developer Advocacy and Open Source Ecosystem at JetBrains.\n\nNew Ecosystem Committee Member\n\nSebastian Aigner has been appointed as a member of the Ecosystem Committee. In his current role as Developer Advocate at JetBrains, Sebastian has intimate contact with the community, understanding not only the needs of developers, but also library authors.\n\nFinally, we’d like to take this opportunity to thank Roman Elizarov for his years of contribution and dedication to Kotlin and its community. Roman’s work, from leading the Kotlin team to coroutines, courses, and talks, have been priceless for Kotlin. He has inspired many folks.\n\nOn behalf of the Kotlin Foundation, thank you Roman for everything you have done.","fields":{"slug":"/news/foundation-changes-oct-23/"},"frontmatter":{"date":"October 26, 2023","title":"Mikhail Zarechenskii named the new Lead Language Designer and other changes in the Kotlin Foundation","spoilerSize":90,"coverImage":null}},{"id":"f93a3417-9fee-5891-b539-77a3e749f963","excerpt":"The Ecosystem Committee is delighted to announce the winners of the first round of our grant program. The program attracted many talented authors of projects from different areas of the Kotlin ecosystem, resulting in a total of 109 applications! After a meticulous review process, we are proud to unveil the five lucky winners:\n\nCoil – an image loading library for Android backed by Kotlin coroutines. The proposal: Implement Kotlin Multiplatform and Compose Multiplatform support and improve features such as network request pooling and caching animated images. Store – a Kotlin Multiplatform library for building network-resilient applications. The proposal: Enhance Store5 with MutableStore, fallback mechanisms, memory cache delegation, and expand its reach beyond Android. Http4k – a functional toolkit for Kotlin HTTP applications. The proposal: Modularize the library to make it even more lightweight at its core and find the best way to provide multiplatform support. KMP-NativeCoroutines – a library to use Kotlin coroutines from Swift code in KMP apps. The proposal: Make the library API stable. Lyricist – an internationalization and localization multiplatform library for Compose. The proposal: Decouple the library from Compose, making it possible to use it on any multiplatform project.\n\nThese open-source projects stood out to the Ecosystem Committee on account of their quality, proposals, and alignment with our criteria.\n\nEach grant recipient will receive $6,000 to further develop and expand their projects.\n\nWe encourage all applicants who did not receive a grant this time to continue developing their projects and watch out for future opportunities. Follow us on our website and social media for updates and the announcement of subsequent rounds of the grant program.","fields":{"slug":"/news/grants-program-winners-23/"},"frontmatter":{"date":"July 05, 2023","title":"The Kotlin Foundation Announces Grants Program Winners","spoilerSize":null,"coverImage":{"publicURL":"/static/484ba0fca4f55297c434eec881fb8fc1/cover.png"}}},{"id":"d9ed0ff4-85ae-55ce-aef5-62a8a510871a","excerpt":"The Kotlin Foundation has formed a new Ecosystem Committee, which we believe will be a key driver in helping the Kotlin ecosystem thrive. The Ecosystem Committee will play a pivotal role in identifying strategic areas for investment in the Kotlin ecosystem. It will prioritize and recommend direct funding of open-source Kotlin projects and raise awareness of members’ individual efforts in developing and enhancing key libraries.\n\nThe Ecosystem Committee has already contributed to the Foundation’s work by designing and launching the new Grants Program, which supports authors of open-source libraries, tools, and frameworks. As the program supervisor, the committee will review grant applications, evaluate submitted projects, and decide whether each project meets the specific criteria for receiving the grant.\n\nThe new committee will serve as the research arm of the Kotlin Foundation board, assisting in maintaining the Kotlin ecosystem’s growth and sustainability. We are confident it will bring a fresh perspective and help us make informed decisions that will benefit the entire ecosystem.\n\nWe are excited to see the positive impact the Committee’s efforts will have on the Kotlin ecosystem in the near future.\n\nIf you have any questions about the Kotlin Foundation and its work, feel free to get in touch with us in the #kotlin-foundation Slack channel or via email at hello@kotlinfoundation.org.","fields":{"slug":"/news/new-ecosystem-committee/"},"frontmatter":{"date":"May 25, 2023","title":"The Kotlin Foundation Establishes the New Ecosystem Committee","spoilerSize":450,"coverImage":null}},{"id":"122824ae-b9ae-579e-a905-3911d5c44af4","excerpt":"Today, we’re introducing the Kotlin Foundation's Grants Program! This initiative will be held on a regular basis and provide financial awards to developers who contribute to the Kotlin ecosystem. At the Kotlin Foundation, we understand the effort that goes into maintaining active and valuable libraries, tools, and frameworks. We want to support these contributors, acknowledge their hard work, and encourage them to invest more time and energy into their projects and continue to make a difference. One of the program's essential aspects is that we do not claim any intellectual property rights or trademarks from the authors we support. We believe that contributors should retain ownership of their work.\n\nThe Kotlin Foundation's Ecosystem Committee will oversee the Grants Program. To be considered, projects must meet several requirements. First, the project must be available under a permissive open-source license. This ensures that the project remains accessible to everyone and contributes positively to the Kotlin ecosystem. Second, the project must be actively maintained and have a track record of development history and contributions. Finally, the project should be developed by private individuals. This means contributors are not allowed to develop their projects as part of their usual line of work.\n\nWe encourage you to submit your grant proposals before May 15, 2023. The Ecosystem Committee will evaluate projects based on multiple criteria, including the potential impact on the Kotlin Multiplatform ecosystem, adherence to best practices for library development, and responsiveness to bug reports and security issues.\n\nPlease reach out to us at grants@kotlinfoundation.org or through the #kotlin-foundation Slack channel, where we'd be more than happy to address any of your program-related questions or concerns. We hope that the Kotlin Foundation's Grants Program will provide contributors with the necessary support to continue their work, and we look forward to how you can shape the future of the Kotlin Multiplatform!","fields":{"slug":"/news/grants-program-goes-live/"},"frontmatter":{"date":"April 13, 2023","title":"The Kotlin Foundation grants program is live","spoilerSize":500,"coverImage":{"publicURL":"/static/6d80e70d11e665f464fd042170f59419/cover.jpg"}}},{"id":"dcc08480-bf0d-5f92-9cb3-07d3eab0aa22","excerpt":"We are thrilled to announce that Gradle Inc., Touchlab, and Shopify have recently joined the Kotlin Foundation as its first silver members. These companies bring with them a wealth of knowledge and experience on how Kotlin is used in production and what the Kotlin ecosystem needs. We are excited to have their collective experience join us in supporting and advancing the Kotlin ecosystem. Gradle Inc. is the creator of the most widely used build tool for Kotlin and the default build system for Android, Kotlin/Native, and Kotlin Multiplatform, called Gradle Build Tool. The company also provides the leading software solution for improving developer productivity and happiness called Gradle Enterprise and is pioneering the emerging practice of Developer Productivity Engineering. As a silver member of the Kotlin Foundation, Gradle will help advance the development of the Kotlin ecosystem and promote the use of Kotlin as a tool for education and industry.\n\n“At Gradle, we are dedicated to providing a productivity platform across all build and language ecosystems,” said Hans Dockter, co-founder and CEO of Gradle. “Gradle has been a longtime supporter of the Kotlin community and we’re excited to further our relationship as a member of the Kotlin Foundation.”\n\nTouchlab is a Kotlin Multiplatform solutions company, and as early members of the community began publishing core open-source libraries and advocating for KMP immediately after its announcement. In 2018 Touchlab began providing tools and technology that organizations need to get KMP in production. They directly publish or contribute to a number of critical KMP libraries, have contributed directly to the Kotlin language and ecosystem, and have consulted many organizations adopting the technology. As silver members of the Kotlin foundation, Touchlab will continue to support the developers championing the language and help teams add KMP to production.\n\n\"Today’s Kotlin story across server, mobile, and web, is singularly powerful. Tomorrow’s Kotlin story: with Web Assembly, portable UI’s, a vibrant ecosystem, and much more, is not just great for the platform. Kotlin will help shape the future of technology. We at Touchlab are extremely proud and excited to help define that future.\" said Kevin Galligan, Technical Partner of Touchlab.\n\nShopify is a global commerce platform that powers millions of businesses in over 170 countries. The company is an early adopter of Kotlin and uses Kotlin Multiplatform at scale for features that have high performance requirements.\n\n\"Kotlin Multiplatform is a key part of the mobile tech stack at Shopify. We’re thrilled to help shape its future and further increase our support of the Kotlin ecosystem by joining the Kotlin Foundation.\" - Mustafa Ali, Head of Core Mobile Engineering, Shopify.\n\nBeing part of the Kotlin Foundation gives Gradle, Touchlab, and Shopify the opportunity to support various initiatives, including the Grants program for open-source library authors and the Kotlin Multiplatform Contest for students. The Grants program supports open-source library authors in the Kotlin community, while the Kotlin Multiplatform Contest encourages students to use Kotlin Multiplatform to develop their apps. By supporting these initiatives, our new members can help us accelerate the development of the Kotlin ecosystem and promote the use of Kotlin as a tool for education and industry.\n\nIf you are interested in learning more about the Kotlin Foundation or our initiatives, please visit the Membership page. The Kotlin Foundation is committed to advancing the Kotlin ecosystem, and we are dedicated to working with our members to achieve this goal!","fields":{"slug":"/news/first-silver-members/"},"frontmatter":{"date":"April 13, 2023","title":"Gradle Inc, Touchlab, and Shopify become Kotlin Foundation's first Silver Members","spoilerSize":null,"coverImage":{"publicURL":"/static/ee19b47a2d158e670e969f48a0a37c47/cover.jpg"}}},{"id":"069db322-b7b1-59d2-9616-c374c51778d6","excerpt":"The Kotlin Foundation recently held a Kotlin Multiplatform Contest for all students and recent graduates who love to code in Kotlin. We received a total of 43 submissions from across the world and we were impressed by the creativity of the projects and the skill of the contestants! After careful deliberation, our panel of judges has chosen the top 3 winners out of 19 qualified submissions. The grand prize winners of the Kotlin Multiplatform Contest are:\n\nAhmet Burak Ilhan, Istanbul Biruni University, Turkey – DoGoodMobile.\n\nDoGoodMobile is an application designed to help users find and connect with volunteering opportunities. It’s a cross-platform mobile application that works on Android and iOS. The application logic is fully shared using Kotlin Multiplatform, and the UI is implemented using Jetpack Compose and SwiftUI.\n\nBrian Kamau Mbigo, Multimedia University of Kenya – VisioZoezi.\n\nVisioZoexi is a fitness application that can detect the correct performance of certain exercises using computer vision. Thanks to Kotlin Multiplatform and Compose Multiplatform, the codebase is unified and works on Android and desktop.\n\nMaciej Procyk, University of Warsaw, Poland – mini-games.\n\nMini-games is a set of online car games. In this project, Kotlin Multiplatform is used to share code both between clients (Android and desktop) and between client and server.\n\nAhmet, Brian, and Maciej have each won the grand prize – an all expenses paid trip to KotlinConf’23 in Amsterdam, courtesy of the Kotlin Foundation. Congratulations to the winners, and thank you for your amazing submissions!\n\nAlso, we would like to thank all of the participants who submitted projects but did not make it into the top 3. Everyone who submitted their projects in accordance with the contest rules got Kotlin merchandise as a token of our appreciation.\n\nWe are looking forward to seeing the winners at KotlinConf’23 and everyone else in next year’s Kotlin Multiplatform contest!","fields":{"slug":"/news/kotlin-multiplatform-contest-results/"},"frontmatter":{"date":"April 13, 2023","title":"Results of the Kotlin Multiplatform contest: meet the winners","spoilerSize":393,"coverImage":{"publicURL":"/static/40c058f75b5f8ea3de49983764556658/cover.jpg"}}},{"id":"8b822bad-b49a-5e4c-9c74-f2da52b8f8b7","excerpt":"Originally, the Kotlin Foundation’s mission was to preserve the Kotlin trademark, control incompatible changes to the language, and assign a lead language designer. But as of 2023, the Foundation is taking on more responsibility, which includes advancing the Kotlin ecosystem and promoting Kotlin in education. At the Kotlin Foundation, we believe many companies that rely on the Kotlin ecosystem want to give back to the community and help the Foundation fulfill its mission. That’s why we are pleased to announce the Kotlin Foundation Membership Program for companies and organizations. The program allows you to become a part of Kotlin’s history and influence its ecosystem by contributing your work and ideas.\n\nAs a Kotlin Foundation member, you’ll support the Kotlin ecosystem by sponsoring projects that are important to the Kotlin community. Foundation members contribute to the board, committees, and workgroups helping shape the Foundation's funding distribution and overall strategy. Moreover, it’s an excellent opportunity to build a brand connection between the Kotlin community and your company.\n\nThe program offers different tiers to distinguish your business, so you can pick the one that works best for you and your needs: Gold or Silver.\n\nGold membership is the perfect choice for companies and organizations looking to become active contributors to the Foundation's work, safeguarding the Foundation's financial and operational strength. Gold tier benefits include a guaranteed seat on the Foundation Board of Directors and the right to serve as Board Secretary.\n\nSilver membership is designed for businesses and organizations that wish to get their name out there as big contributors to the Foundation. Silver members gain an opportunity to sit on the Foundation's board. For every 5 Silver members, you'll get 1 seat on the board. You’ll also be able to take part in the Operating, Trademark, and Ecosystem Committees.\n\nJoin other Foundation members to help us shape and develop the Kotlin ecosystem. If you want to apply or have any questions about the Kotlin Foundation and its membership program, you can drop us a line at hello@kotlinfoundation.org. We’ll be happy to help!","fields":{"slug":"/news/announcing-membership-program/"},"frontmatter":{"date":"April 13, 2023","title":"Announcing the Kotlin Foundation membership program","spoilerSize":588,"coverImage":{"publicURL":"/static/c352993a9ab2c65051750f94c04e4267/cover.jpg"}}}]}}}